{"version":3,"sources":["../../../src/modules/people/PeopleController.js"],"names":["PeopleController","getPeople","req","res","people","models","Person","findAll","json","err","getOnePerson","person","findByPk","params","id","postPeople","checkForName","findOne","where","name","body","postedPeople","create","updatePeople","updatedPeople","update","subject","institution","status","knownfor","knowfor","bio","deletePeople","deletedPeople","destroy"],"mappings":"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","sourcesContent":["import models from '../../database/models'\nimport { request } from 'http';\n\nclass PeopleController {\n    //Method getting all the members from the database\n    static async getPeople (req, res) {\n        try{\n            const people = await  models.Person.findAll()\n            return res.json(people)\n        }\n        catch(err){\n            return res.json('Server err')\n        }\n    }\n\n    //Method getting one member from the database\n    static async getOnePerson (req, res) {\n        try{\n            const person = await  models.Person.findByPk(req.params.id)\n            return res.json(person)\n        }\n        catch(err){\n            return res.json('Server err')\n        }\n    }\n\n    //Method posting people information to database\n    static async postPeople (req, res){\n        try{\n        const checkForName = await models.Person.findOne({\n            where: { name: req.body.name}\n        })\n        if(checkForName){\n            return res.json('name already exists')\n        }\n        else{\n            const postedPeople = await models.Person.create(req.body)\n            return res.json(postedPeople)\n        }\n        \n        }\n        catch(err){\n            return res.json('server error ')\n        }\n    }\n\n    //Update database\n    static async updatePeople(req, res) {\n        try{\n            const updatedPeople = await models.Person.update({\n                name: req.body.name,\n                subject: req.body.subject,\n                institution: req.body.institution,\n                status: req.body.status,\n                knownfor: req.body.knowfor,\n                bio: req.body.bio\n              }, {\n                where: {\n                  id: req.params.id\n                }\n              })\n            return res.json(updatedPeople)\n        }\n        catch(err){\n            return res.json(err)\n        }\n    }\n    //Delete entry in database\n    static async deletePeople(req, res) {\n        const deletedPeople = await models.Person.destroy({\n            where: {\n            id: req.params.id\n            }\n        })\n        return res.json(deletedPeople)\n    }\n\n}\nexport default PeopleController"],"file":"PeopleController.js"}